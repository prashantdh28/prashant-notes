
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Source Code Repository Tools (or) Version Control Software
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-> Multiple developers will work on project development

-> Developers will be working from multiple locations

-> All developer's code should be stored in one place (Code Integration Should Happen)

-> To integrate all the developer's source code in one place we will use Sourcecode Repository Software


Advantages of Source code repository software
++++++++++++++++++++++++++++++++++++++++++++++

1) All the developers can connect to the repository server and can integrate the code

2) Repository server will provide monitored access

				- Who
			      - When
				- Why
				- What


Repository Tools
++++++++++++++++

SVN (outdated)

Git Hub

BitBucket


Environment Setup to work with Git Hub
++++++++++++++++++++++++++++++++++++++

1) Create a GitHub account ( www.github.com )

2) Download and install Git Client software ( https://git-scm.com/downloads )

3) Once installation is completed, right-click on the mouse and verify the git options display (If the git options display our git client installation is completed successfully)



Working with GitHub
+++++++++++++++++++
-> Login into your GitHub account with your credentials

-> Create a Repository on GitHub

Note: Repository is used to store project source code. Every Project will have one repository

-> When we create a repository, a unique URL will be generated with Repository Name (i.e Repo URL)

-> All the developers will connect to the repository using the Repository URL

-> We can create 2 types of Repositories in Git Hub
	
			1) public repository 

			2) private repository

-> Public Repository means everybody can access but we can choose who can modify our repository

-> Private Repository means we will choose who can access and who can modify


		Repo URL: https://github.com/ashokitschool/01-devops-app.git


Working with Git Bash
+++++++++++++++++++++

-> Git Bash we can use as Git Client software to perform Git Operations

-> Download and install git client (https://git-scm.com/downloads)

-> Right Click on Mouse and choose "Open Git Bash Here"


git help: It will display frequently used git commands

git help <cmd-name>: It will open documentation for the given command


Configure Your Email and Name in GitBash with Commands
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ git config --global user.email "youremail@yourdomain.com"

$ git config --global user.name "name"


$ git init: To initialize our folder as a git working tree folder

$ git clone: To clone the git repository to our machine from github.com 

		Syntax : $ git clone <project-repo-url>

$ git status: It will display staged, un-staged, and un-tracked files

		Syntax : $ git status

		Staged Files: The files which are added for commit

		Un-Staged Files: The files which are modified but not added for commit

		Un-tracked files: Newly created files

Note: To commit a file(s), we should add to the staging area first


$ git add: It is used to add file(s) to the staging area

		Syntax : $ git add <file-name>

				$ git add .

$ git commit: It is used to commit staged files to the git local repository

		Syntax: $ git commit -m 'reason for commit'

$ git push: To push changes from the git local repository to the git central repository

		Syntax  : $ git push


Steps to push code to GitHub central repository
++++++++++++++++++++++++++++++++++++++++++++++++

1) Create one public repository in the git hub (take the GitHub repo URL)

2) Clone the GitHub repository using the 'git clone command

		$ git clone 'repo-URL

3) Navigate to the repository folder

4) Create one file in the repository folder

		$ touch Demo.java

5) Check the status of the file using the 'git status' command

		$ git status (It will display as an untracked file)

6) Add file to staging area using the 'git add' command

		$ git add .

7) Commit file to git local repository

		$ git commit -m 'commit-msg'

8) Push the file from the git local repository to the git central repository using the 'git push' command

		$ git push

Note: If you are doing 'git push' for the first time it will ask you to enter your GitHub account password.


------------------------------------------------------------------------------------------------------------------
Note: Git bash will ask our password only for first time. It will save our git credentials in Credential Manager in Windows machine.

-> Go to Credential Manager -> Windows Credentials -> Select Github -> We can modify and delete saved credentials from here
------------------------------------------------------------------------------------------------------------------

-> When we do git commit then it will geneate a commit-id with 40 characters length

-> From this commit-id it will display first 7 characters in git hub central repository

-> We can check commit history using 'git log' command

---------------------------------------------------------------------------------------------------------------------
Steps to commit Maven Project to Github Repository
---------------------------------------------------------------------------------------------------------------------

1) Create Maven Project

2) Create GitHub Repository

Note: After creating git repository, it will display set of commands to execute

3) Open gitbash from project folder and execute below commands

$ git init
$ git status
$ git add .
$ git commit -m 'commit-msg'
$ git branch -M main
$ git remote add origin <repo-url>
$ git push -u origin master
--------------------------------------------------------------------------------------------------------------------
git help
git config
git init
git status
git add .
git restore
git commit -m 'msg'
git push
git clone
git log
git remote add 
--------------------------------------------------------------------------------------------------------

When we are working on one task suddenly we may get some other priority task.

Usecase
++++++++
-> ager assigned task id : 101
-> I am working on that task (i am in middle of the task)
-> Managed told that stop the work for 101 and complete 102 on priority. 
-> Once 102 is completed then resume your work on 101

-> When manager asked me to start 102 task, i have already done few changes for 101 
  (partially completed)
  
-> We can't push partial changes to repository because with our partial changes existing functionality may break.

-> We can't delete our changes because we have spent few hours of time to implement those changes


***************  In this scenario we will go for 'git stash' option *********************

=> Git stash is used to save working tree changes to temporary location and make working tree clean.

-> After priority work completed we can get stashed changes back using 'git stash apply'


+++++++++++
Git Branches
+++++++++++

-> Branches are used to maintain seperate code bases for our project

-> In GiT repository we can create multiple branches

main
develop
qa
release
research


-> development team will integrate the code in 'develop' branch

-> bug-fixing team will integrate the code in 'qa' branch

-> R & D team will integrate the code in 'research' branch

-> In github we can create branches

-> To clone particular branch in git repo we will use below command

		$ git clone -b <branch-name> <repo-url>



++++++++++++++
Branch Merging
++++++++++++++

=> The process of merging changes from one branch to another branch is called as Branch merging

=> We will use Pull Request for Branch Merging


Steps to do branch merging
++++++++++++++++++++++++++

1) Create feature branch from main branch

2) clone feature branch 

3) create new file in feature branch then commit and push to central repo

4) Go to central repository then create pull request to merge feature branch changes to main branch

Note: Once feature branch changes are merged to main branch then we can delete feature branch (if required)



++++++++++++++++++
What is .gitignore ?
++++++++++++++++++

-> This .gitignore is used to configure the files or folders which we want to ignore from our commits

-> The files and folders which are not required to commit to central repository those things we can configure in .gitignore file

Ex: In maven project 'target' folder will be available which is not required to commit to central repository. This we can configure in .gitignore file.

---------------------------------------.gitignore-------------------------------------------------------
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

++++++++++++++++++++++
git merge vs git rebase
++++++++++++++++++++++

=> These commands are used to merge changes from one branch to another branch

-> git merge will maintain commit history

-> git rebase will not maintain that rebase history

-> When we are working on particular sprint and we want to merge changes from one branch to another branch then we will use 'git merge' command

-> Once sprint-1 is delivered then we want to take latest code of sprint-1 to start sprint-2 development. In this scenario we don't need commit history so we will use 'git rebase' command.

-> git merge & git rebase commands are used to merge changes from one branch to another branch


//merge demo
-> Create a new folder (merge-demo) and navtigate into that folder using git bash and execute below commands

git status
git init
touch m1.txt
git add .
git commit -m "added m1.txt"
git log

git branch feature
git checkout feature

Note: From master we have created feature branch

touch f1.txt
git add .
git commit -m 'added f1.txt"
git log

Feature contains m1.txt and f1.txt

if you swtich to master you can see only m1.txt 
git checkout master


//i will make few more changes to master
git touch m2.txt
git add .
git commit -m 'added m2.txt"
git log


The changes happend in master branch are relevant to feature. I want to get master branch changes to feature branch. 

we have two options

git merge
git rebase

git checkout feature  (i have m1.txt and f1.txt but m2.txt not available)
git merge master (m2.txt also we got into feature)
git log

Note: git merge command, commited all master branch changes to feature branch.

Note: See commit history we can see that at what time merge happend it is displaying that.


//rebase demo
=> Create rebase-demo folder and navigate to that folder and open cmd and execute below commands

git init
touch m1.txt 
git add .
git commit -m 'added m1.txt'
git log


git branch feature
git checkout feature
touch f1.txt
git add .
git commit -m 'added f1.txt'
git log

//making few more changes to master
git checkout master
touch m2.txt
git add .
git commit -m 'added m2.txt'
git checkout feature

git rebase master (master branch changes will come to feature brach)
git log

Note: In commit history at that time we have done rebase will not displayed.
-----------------------------------------------------------------------------------------------
Note: Git merge will maintain commits history and it will log when merge happend
Note: Git rebase will make commit history linear. 
---------------------------------------------------------------------------------------------




++++++++++++++++++++++
What is git pull command 
++++++++++++++++++++++

-> pull command is used to take latest changes from repository to local

-> When we want to make some changes to code, it is always recommended to take git pull


Note: When we execute 'git pull' there is a chance of getting conflicts. We need to resolve the conflict and we should push the code without conflicts.


Interview Questions
+++++++++++++++++++
1) What is Source Code repository
2) Why we need source code repository
3) What are the source code repository servers available
4) What is Code Integration
5) What is Monitored Access 
6) What is git hub
7) What is git 
8) What is version control
9) What is Repository
10) Public Repository vs Private Repository
11) Cloning Repository
12) Staged vs Unstaged vs Untracked File
13) How to add files to Stating Area
14) How to Unstage the files from staging
15) Discarding local changes
16) What is working tree
17) What is Local Repostiory
18) What is Central Repository
19) Commit from working tree to local repo
20) push from local repo to central repo
21) Taking latest code changes
22) push vs pull
23) What is conflict
24) How to resolve conflicts
25) What is branch in git hub
26) How to create branches
27) How to clone particular branch
28) how to switch to particular branch
29) How to merge branches
30) What is pull request
31) git merge vs rebase
32) what is .gitignore
33) git fetch vs git pull


+++++++++++
Assignment
++++++++++

1) Create Maven Web Application
2) Package maven project as war file using maven goal
3) Create Git repository in github.com (public repo)
4) Push maven project into github repo using gitbash
   (target folder shouldn't be commited, add this is .gitignore file)
5) Make changes in pom.xml and push changes to github repo using git bash
6) Create 'feature' branch in git repo from main branch
7) Clone feature branch from git bash using git clone
8) Make changes in 'feature' branch pom.xml file and push changes to central repo
9) Create pull request and merge 'feature' branch changes to 'main' branch



























































# Installing Maven in Linux Machine

$ sudo yum install maven

# Verify Maven version in Linux

$ mvn -version

# Installing Git in Linux Machine

$ sudo yum install git

# Verify git version in Linux

$ git --version






























				